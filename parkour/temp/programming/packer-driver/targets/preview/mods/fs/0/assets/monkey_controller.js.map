{"version":3,"sources":["file:///Users/liuhongbo/parkour/assets/monkey_controller.ts"],"names":["v2","Animation","_decorator","Component","Input","input","Collider2D","Contact2DType","RigidBody2D","find","ccclass","property","monkey_state","monkey_controller","Number","onBeginContact","selfCollider","otherCollider","contact","ani","node","getComponent","monkey_rgd","linearVelocity","mk_state","DEAD","ltree","ltree_rgd","ltree2","ltree2_rgd","rtree","rtree_rgd","rtree2","rtree2_rgd","i","NumOfHedgehogs","HedgeHogNode","Hedgehog_rgd","bee","bee_rgd","play","console","log","onEndContact","onPreSolve","onPostSolve","start","ALIVE","on","EventType","MOUSE_DOWN","event","getState","isPlaying","x","getPosition","setScale","collider","BEGIN_CONTACT","update","deltaTime"],"mappings":"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","sourcesContent":["\nimport {v2, Animation,_decorator, Component, Node, Sprite, Input, systemEvent, input, Collider2D, Contact2DType, IPhysics2DContact, RealInterpolationMode, RigidBody2D, v3, find } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Predefined variables\n * Name = monkey_controller\n * DateTime = Sun Mar 13 2022 21:48:57 GMT+0800 (中国标准时间)\n * Author = AlexiosLHB\n * FileBasename = monkey_controller.ts\n * FileBasenameNoExtension = monkey_controller\n * URL = db://assets/monkey_controller.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/zh/\n *\n */\n enum monkey_state{\n     ALIVE,\n     DEAD\n}\n \n@ccclass('monkey_controller')\nexport class monkey_controller extends Component {\n    @property(Number)\n    NumOfHedgehogs:number\n    // [1]\n    // dummy = '';\n\n    // [2]\n    // @property\n    // serializableDummy = 0;\n    mk_state:monkey_state\n\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        // 只在两个碰撞体开始接触时被调用一次\n        let ani = this.node.getComponent(Animation);\n        let monkey_rgd = this.node.getComponent(RigidBody2D);\n        monkey_rgd.linearVelocity = v2(0,-25);\n        this.mk_state=monkey_state.DEAD;\n        let ltree = find(\"Canvas/ltree\");\n        let ltree_rgd = ltree.getComponent(RigidBody2D);\n        ltree_rgd.linearVelocity = v2(0,0);\n        let ltree2 = find(\"Canvas/ltree2\");\n        let ltree2_rgd = ltree2.getComponent(RigidBody2D);\n        ltree2_rgd.linearVelocity= v2(0,0);\n        let rtree = find(\"Canvas/rtree\");\n        let rtree_rgd = rtree.getComponent(RigidBody2D);\n        rtree_rgd.linearVelocity= v2(0,0);\n        let rtree2 = find(\"Canvas/rtree2\");\n        let rtree2_rgd = rtree2.getComponent(RigidBody2D);\n        rtree2_rgd.linearVelocity= v2(0,0);\n        for(var i =1;i<this.NumOfHedgehogs+1;i++){\n  \n            var HedgeHogNode=find(\"Canvas/Hedgehog\"+i);\n    \n            var Hedgehog_rgd=HedgeHogNode.getComponent(RigidBody2D);\n            Hedgehog_rgd.linearVelocity= v2(0,0);\n        }\n        let bee = find(\"Canvas/Bee\");\n        let bee_rgd=bee.getComponent(RigidBody2D);\n        bee_rgd.linearVelocity = v2(0,0);\n\n        ani.play(\"monkey_dying\");\n        console.log(\"onBeginContact\");\n\n\n    }\n    onEndContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        // 只在两个碰撞体结束接触时被调用一次\n        console.log('onEndContact');\n    }\n    onPreSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        // 每次将要处理碰撞体接触逻辑时被调用\n        console.log('onPreSolve');\n    }\n    onPostSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\n        // 每次处理完碰撞体接触逻辑时被调用\n        console.log('onPostSolve');\n    }\n\n\n    \n    start () {\n        this.mk_state = monkey_state.ALIVE\n        input.on(Input.EventType.MOUSE_DOWN,(event)=>{\n            let ani = this.node.getComponent(Animation);\n            if(ani.getState(\"monkey_runninng\").isPlaying==true)\n            {\n                let x =this.node.getPosition().x\n                if(x>0){\n                 this.node.setScale(0.3,-0.3,0);\n                ani.play(\"monkey_jumpingtoleft\");\n                }\n                else if(x<0){\n                    this.node.setScale(0.3,0.3,0);\n                    ani.play(\"monkey_jumpingtoright\");\n\n                }\n\n            \n               \n                \n            }\n           \n        })\n        let collider = this.getComponent(Collider2D);\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n            // collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\n            // collider.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\n            // collider.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\n        }\n        // [3]\n    }\n\n \n    \n\n    update (deltaTime: number) {\n        let ani = this.node.getComponent(Animation);\n        if(ani.getState(\"monkey_runninng\").isPlaying==false&&ani.getState(\"monkey_jumpingtoleft\").isPlaying==false&&ani.getState(\"monkey_jumpingtoright\").isPlaying==false&&this.mk_state == monkey_state.ALIVE){\n            ani.play(\"monkey_runninng\");\n        }\n        \n        \n        // [4]\n    }\n}\n\n/**\n * [1] Class member could be defined like this.\n * [2] Use `property` decorator if your want the member to be serializable.\n * [3] Your initialization goes here.\n * [4] Your update function goes here.\n *\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/zh/scripting/\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/zh/scripting/decorator.html\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/zh/scripting/life-cycle-callbacks.html\n */\n"]}