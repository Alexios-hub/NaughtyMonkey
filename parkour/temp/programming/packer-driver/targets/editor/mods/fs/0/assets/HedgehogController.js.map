{"version":3,"sources":["file:///Users/liuhongbo/Downloads/NaughtyMonkey/parkour/assets/HedgehogController.ts"],"names":["Animation","_decorator","Component","find","RigidBody2D","v2","Collider2D","Contact2DType","monkey_controller","monkey_state","ccclass","property","HedgehogSTATE","HedgehogController","Number","IDLE","moveway","ifrun","Math","random","ani","getComponent","rgd","run_possibility","node","getScale","x","linearVelocity","speed","state","DOWNRUNNING","UPRUNNING","play","judgerun","y","getPosition","i","name","abs","position","bee_node","judge","reset","up_or_down","l_or_r","setScale","setPosition","onBeginContact","selfCollider","otherCollider","contact","tag","DEAD","start","collider","on","BEGIN_CONTACT","ifup","up_possibility","update","deltaTime","mk_controller","mk_state","ALIVE","ltree","ltree_rgd","during_time","getState","isPlaying","judge_time","ifrevert","revert_possibility","z","die"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,S,OAAAA,S;AAAUC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,E,OAAAA,E;AAAgBC,MAAAA,U,OAAAA,U;AAA+BC,MAAAA,a,OAAAA,a;;AAEzGC,MAAAA,iB,iBAAAA,iB;AAAmBC,MAAAA,Y,iBAAAA,Y;;;;;;;OACtB;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBV,U;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;iBACYW,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;AAAAA,QAAAA,a,CAAAA,a;SAAAA,a,6BAAAA,a;;oCAQCC,kB,WADZH,OAAO,CAAC,oBAAD,C,UAOHC,QAAQ,CAACG,MAAD,C,UAERH,QAAQ,CAACG,MAAD,C,UAERH,QAAQ,CAACG,MAAD,C,UAERH,QAAQ,CAACG,MAAD,C,UAERH,QAAQ,CAACG,MAAD,C,UAGRH,QAAQ;AAAA;AAAA,iD,UAGRA,QAAQ,CAACG,MAAD,C,oCArBb,MACaD,kBADb,SACwCX,SADxC,CACkD;AAAA;AAAA;;AAAA,+CAC3B,CAD2B;;AAAA,yCAExBU,aAAa,CAACG,IAFU;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AA2B9C;AACA;AAEA;AACA;AACA;AACAC,QAAAA,OAAO,GAAE;AAGL,cAAIC,KAAK,GAAGC,IAAI,CAACC,MAAL,EAAZ;AACA,cAAIC,GAAG,GAAG,KAAKC,YAAL,CAAkBrB,SAAlB,CAAV;AACA,cAAIsB,GAAG,GAAG,KAAKD,YAAL,CAAkBjB,WAAlB,CAAV;;AACA,cAAGa,KAAK,GAAC,KAAKM,eAAd,EAA8B;AAE1B,gBAAG,KAAKC,IAAL,CAAUC,QAAV,GAAqBC,CAArB,GAAuB,CAA1B,EAA4B;AACxBJ,cAAAA,GAAG,CAACK,cAAJ,GAAmBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAL,GAAW,CAAd,CAArB;AACA,mBAAKC,KAAL,GAAajB,aAAa,CAACkB,WAA3B;AACH,aAHD,MAKM;AACFR,cAAAA,GAAG,CAACK,cAAJ,GAAmBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAL,GAAW,CAAd,CAArB;AACA,mBAAKC,KAAL,GAAWjB,aAAa,CAACmB,SAAzB;AACH;;AACDX,YAAAA,GAAG,CAACY,IAAJ,CAAS,kBAAT;AAEH,WAbD,MAcI;AACAV,YAAAA,GAAG,CAACK,cAAJ,GAAmBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAR,CAArB;AACA,iBAAKC,KAAL,GAAWjB,aAAa,CAACG,IAAzB;AACAK,YAAAA,GAAG,CAACY,IAAJ,CAAS,eAAT;AAEH;AACJ;;AACDC,QAAAA,QAAQ,GAAE;AACN,cAAIC,CAAC,GAAG,KAAKV,IAAL,CAAUW,WAAV,GAAwBD,CAAhC;;AACA,eAAI,IAAIE,CAAC,GAAE,CAAX,EAAaA,CAAC,GAAC,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACjB,gBAAIZ,IAAI,GAAGrB,IAAI,CAAC,oBAAkBiC,CAAnB,CAAf;AACA,gBAAG,aAAWA,CAAX,IAAgB,KAAKZ,IAAL,CAAUa,IAA1B,IAAgCnB,IAAI,CAACoB,GAAL,CAASd,IAAI,CAACe,QAAL,CAAcL,CAAd,GAAgBA,CAAzB,KAA6B,GAAhE,EAAoE,OAAO,KAAP;AACvE;;AACD,cAAIM,QAAQ,GAAGrC,IAAI,CAAC,YAAD,CAAnB;AACA,cAAGe,IAAI,CAACoB,GAAL,CAASE,QAAQ,CAACD,QAAT,CAAkBL,CAAlB,GAAoBA,CAA7B,KAAiC,GAApC,EAAwC,OAAO,KAAP;AACxC,iBAAO,IAAP;AACH;;AACDO,QAAAA,KAAK,GAAE;AACH,eAAI,IAAIL,CAAC,GAAE,CAAX,EAAaA,CAAC,GAAC,CAAf,EAAiBA,CAAC,EAAlB,EAAqB;AACjB,gBAAIZ,IAAI,GAAGrB,IAAI,CAAC,oBAAkBiC,CAAnB,CAAf;AACA,gBAAGlB,IAAI,CAACoB,GAAL,CAASd,IAAI,CAACe,QAAL,CAAcL,CAAd,GAAgB,KAAKA,CAA9B,KAAkC,GAArC,EAAyC,OAAO,KAAP;AAC5C;;AACD,cAAIM,QAAQ,GAAGrC,IAAI,CAAC,YAAD,CAAnB;AACA,cAAGe,IAAI,CAACoB,GAAL,CAASE,QAAQ,CAACD,QAAT,CAAkBL,CAAlB,GAAoB,KAAKA,CAAlC,KAAsC,GAAzC,EAA6C,OAAO,KAAP;AAC7C,iBAAO,IAAP;AACH;;AACDQ,QAAAA,KAAK,GAAE;AACH,cAAIC,UAAU,GAAGzB,IAAI,CAACC,MAAL,EAAjB;AAEA,cAAIyB,MAAM,GAAG1B,IAAI,CAACC,MAAL,EAAb;;AACI,cAAGyB,MAAM,GAAC,GAAV,EAAc;AACV,gBAAGD,UAAU,GAAC,GAAd,EAAkB;AAClB,mBAAKnB,IAAL,CAAUqB,QAAV,CAAmB,CAAC,IAApB,EAAyB,IAAzB,EAA8B,IAA9B;AACC,aAFD,MAIA;AACI,mBAAKrB,IAAL,CAAUqB,QAAV,CAAmB,IAAnB,EAAwB,IAAxB,EAA6B,IAA7B;AACH;;AACD,iBAAKrB,IAAL,CAAUsB,WAAV,CAAsB,GAAtB,EAA0B,KAAKZ,CAA/B,EAAiC,CAAjC;AAGH,WAXD,MAYI;AACA,gBAAGS,UAAU,GAAC,GAAd,EACA,KAAKnB,IAAL,CAAUqB,QAAV,CAAmB,CAAC,IAApB,EAAyB,CAAC,IAA1B,EAA+B,IAA/B,EADA,KAGA,KAAKrB,IAAL,CAAUqB,QAAV,CAAmB,IAAnB,EAAwB,CAAC,IAAzB,EAA8B,IAA9B;AACA,iBAAKrB,IAAL,CAAUsB,WAAV,CAAsB,CAAC,GAAvB,EAA2B,KAAKZ,CAAhC,EAAkC,CAAlC;AACH;;AACD,eAAKlB,OAAL;AAGP;;AACD+B,QAAAA,cAAc,CAAEC,YAAF,EAA4BC,aAA5B,EAAuDC,OAAvD,EAA0F;AAEpG;AACA,cAAGD,aAAa,CAACE,GAAd,IAAqB,CAAxB,EAA0B;AAC1B,iBAAKtB,KAAL,GAAajB,aAAa,CAACwC,IAA3B;AACA,gBAAI9B,GAAG,GAAG,KAAKE,IAAL,CAAUH,YAAV,CAAuBjB,WAAvB,CAAV;AACAkB,YAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAR,CAAvB;AACA,gBAAIR,GAAG,GAAG,KAAKI,IAAL,CAAUH,YAAV,CAAuBrB,SAAvB,CAAV;AACAoB,YAAAA,GAAG,CAACY,IAAJ,CAAS,gBAAT;AACC;AAGJ;;AAKDqB,QAAAA,KAAK,GAAI;AACL,cAAIC,QAAQ,GAAG,KAAKjC,YAAL,CAAkBf,UAAlB,CAAf;;AACA,cAAGgD,QAAH,EAAY;AACRA,YAAAA,QAAQ,CAACC,EAAT,CAAYhD,aAAa,CAACiD,aAA1B,EAAyC,KAAKT,cAA9C,EAA8D,IAA9D;AACH;;AACD,cAAIU,IAAI,GAAGvC,IAAI,CAACC,MAAL,EAAX;;AACA,cAAGsC,IAAI,GAAC,KAAKC,cAAb,EAA4B;AACxB,iBAAKhB,KAAL;AACH,WAFD,MAGI;AACA,iBAAKlB,IAAL,CAAUsB,WAAV,CAAsB,GAAtB,EAA0B,CAAC,IAA3B,EAAgC,CAAhC;AACH,WAXI,CAYL;;AACH;;AAEDa,QAAAA,MAAM,CAAEC,SAAF,EAAqB;AAEzB,cAAG,KAAKC,aAAL,CAAmBC,QAAnB,IAA+B;AAAA;AAAA,4CAAaC,KAA/C,EAAqD;AACnD,gBAAIC,KAAK,GAAG7D,IAAI,CAAC,cAAD,CAAhB;AACA,gBAAI8D,SAAS,GAAGD,KAAK,CAAC3C,YAAN,CAAmBjB,WAAnB,CAAhB;AAIA,iBAAK8D,WAAL,IAAkBN,SAAlB;AACA,gBAAItC,GAAG,GAAG,KAAKD,YAAL,CAAkBjB,WAAlB,CAAV;AACA,iBAAKwB,KAAL,GAAaqC,SAAS,CAACtC,cAAV,CAAyBO,CAAtC,CARmD,CAWnD;;AACA,oBAAO,KAAKL,KAAZ;AACI,mBAAMjB,aAAa,CAACkB,WAApB;AACIR,gBAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAL,GAAW,CAAd,CAAvB;AACA;;AACJ,mBAAKhB,aAAa,CAACmB,SAAnB;AACIT,gBAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAL,GAAW,CAAd,CAAvB;AACA;;AACJ,mBAAMhB,aAAa,CAACG,IAApB;AACIO,gBAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAR,CAAvB;AACA;;AACJ,mBAAKhB,aAAa,CAACwC,IAAnB;AACI,oBAAIhC,GAAG,GAAG,KAAKI,IAAL,CAAUH,YAAV,CAAuBrB,SAAvB,CAAV;;AAEA,oBAAGoB,GAAG,CAAC+C,QAAJ,CAAa,gBAAb,EAA+BC,SAA/B,IAA0C,KAA7C,EAAmD;AAG/C,uBAAKvC,KAAL,GAAajB,aAAa,CAACG,IAA3B;AACAO,kBAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAR,CAAvB;AACA,uBAAKJ,IAAL,CAAUsB,WAAV,CAAsB,GAAtB,EAA0B,CAAC,IAA3B,EAAgC,CAAhC;AAEH;;AACD;AArBR;;AAoCA,gBAAG,KAAKoB,WAAL,GAAiB,KAAKG,UAAtB,IAAmC,KAAK7C,IAAL,CAAUW,WAAV,GAAwBD,CAAxB,GAA0B,CAAC,GAA9D,IAAmE,KAAKO,KAAL,EAAtE,EACA;AAEI,mBAAKyB,WAAL,GAAmB,CAAnB;AACA,kBAAII,QAAQ,GAAGpD,IAAI,CAACC,MAAL,EAAf;;AACA,kBAAGmD,QAAQ,GAAC,KAAKC,kBAAjB,EAAoC;AAChC,qBAAK7B,KAAL;AACH;AACJ;;AACD,gBAAItB,GAAG,GAAG,KAAKC,YAAL,CAAkBrB,SAAlB,CAAV;;AAEA,gBAAGoB,GAAG,CAAC+C,QAAJ,CAAa,kBAAb,EAAiCC,SAAjC,IAA8C,IAAjD,EAAsD;AAGlD,kBAAG,KAAKnC,QAAL,MAAiB,KAApB,EAA0B;AAEtB,oBAAG,KAAKJ,KAAL,IAAcjB,aAAa,CAACkB,WAA/B,EAA2C;AACvC,uBAAKD,KAAL,GAAWjB,aAAa,CAACmB,SAAzB;AACA,uBAAKP,IAAL,CAAUqB,QAAV,CAAmB,IAAnB,EAAwB,KAAKrB,IAAL,CAAUC,QAAV,GAAqBS,CAA7C,EAA+C,KAAKV,IAAL,CAAUC,QAAV,GAAqB+C,CAApE;AAEAlD,kBAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAL,GAAW,CAAd,CAAvB;AACH,iBALD,MAMK,IAAG,KAAKC,KAAL,IAAcjB,aAAa,CAACmB,SAA/B,EAAyC;AAC1C,uBAAKF,KAAL,GAAajB,aAAa,CAACkB,WAA3B;AACA,uBAAKN,IAAL,CAAUqB,QAAV,CAAmB,CAAC,IAApB,EAAyB,KAAKrB,IAAL,CAAUC,QAAV,GAAqBS,CAA9C,EAAgD,KAAKV,IAAL,CAAUC,QAAV,GAAqB+C,CAArE;AAEAlD,kBAAAA,GAAG,CAACK,cAAJ,GAAqBtB,EAAE,CAAC,CAAD,EAAG,KAAKuB,KAAL,GAAW,CAAd,CAAvB;AAEH;AACJ;AAEJ;AAMF,WAvFwB,CAwFvB;;AACH;;AAED6C,QAAAA,GAAG,GAAG;AACF;AACA,eAAKjD,IAAL,CAAUH,YAAV,CAAuBrB,SAAvB,EAAkCgC,IAAlC,CAAuC,gBAAvC,EAFE,CAGF;AACA;AAEH;;AA3O6C,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8OlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\r\nimport { Animation,_decorator, Component, Node, find, RigidBody2D, v2, TypeScript, Collider2D, IPhysics2DContact, Contact2DType, director } from 'cc';\r\nimport { CanvasController } from './CanvasController';\r\nimport { monkey_controller, monkey_state } from './monkey_controller';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = HedgehogController\r\n * DateTime = Tue Mar 15 2022 09:20:12 GMT+0800 (中国标准时间)\r\n * Author = AlexiosLHB\r\n * FileBasename = HedgehogController.ts\r\n * FileBasenameNoExtension = HedgehogController\r\n * URL = db://assets/HedgehogController.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/zh/\r\n *\r\n */\r\nexport enum HedgehogSTATE{\r\n    UPRUNNING,\r\n    DOWNRUNNING,\r\n    IDLE,\r\n    DEAD\r\n}\r\n \r\n@ccclass('HedgehogController')\r\nexport class HedgehogController extends Component {\r\n    during_time:number=0;\r\n    state:HedgehogSTATE = HedgehogSTATE.IDLE;\r\n\r\n  \r\n\r\n    @property(Number)\r\n    y:number\r\n    @property(Number)\r\n    judge_time:number;\r\n    @property(Number)\r\n    run_possibility:number;\r\n    @property(Number)\r\n    up_possibility:number;\r\n    @property(Number)\r\n    revert_possibility:number;\r\n\r\n    @property(monkey_controller)\r\n    mk_controller:monkey_controller;\r\n\r\n    @property(Number)\r\n    speed:number\r\n\r\n\r\n   \r\n\r\n    \r\n    // [1]\r\n    // dummy = '';\r\n\r\n    // [2]\r\n    // @property\r\n    // serializableDummy = 0;\r\n    moveway(){\r\n    \r\n\r\n        let ifrun = Math.random();\r\n        let ani = this.getComponent(Animation);\r\n        let rgd = this.getComponent(RigidBody2D);\r\n        if(ifrun<this.run_possibility){\r\n\r\n            if(this.node.getScale().x<0){\r\n                rgd.linearVelocity=v2(0,this.speed-3);\r\n                this.state = HedgehogSTATE.DOWNRUNNING;\r\n            }\r\n            \r\n            else  {\r\n                rgd.linearVelocity=v2(0,this.speed+3);\r\n                this.state=HedgehogSTATE.UPRUNNING;\r\n            }\r\n            ani.play(\"Hedgehog_Walking\");\r\n\r\n        }\r\n        else{\r\n            rgd.linearVelocity=v2(0,this.speed);\r\n            this.state=HedgehogSTATE.IDLE;\r\n            ani.play(\"Hedgehog_Idle\");\r\n\r\n        }\r\n    }\r\n    judgerun(){\r\n        var y = this.node.getPosition().y;\r\n        for(var i =1;i<5;i++){\r\n            var node = find(\"Canvas/Hedgehog\"+i);\r\n            if(\"Hedgehog\"+i != this.node.name&&Math.abs(node.position.y-y)<=300)return false;\r\n        }\r\n        var bee_node = find(\"Canvas/Bee\");\r\n        if(Math.abs(bee_node.position.y-y)<=300)return false;\r\n        return true;\r\n    }\r\n    judge(){\r\n        for(var i =1;i<5;i++){\r\n            var node = find(\"Canvas/Hedgehog\"+i);\r\n            if(Math.abs(node.position.y-this.y)<=300)return false;\r\n        }\r\n        var bee_node = find(\"Canvas/Bee\");\r\n        if(Math.abs(bee_node.position.y-this.y)<=300)return false;\r\n        return true;\r\n    }\r\n    reset(){\r\n        let up_or_down = Math.random();\r\n\r\n        let l_or_r = Math.random();\r\n            if(l_or_r>0.5){\r\n                if(up_or_down<0.5){\r\n                this.node.setScale(-0.25,0.25,0.25);\r\n                }\r\n                else \r\n                {\r\n                    this.node.setScale(0.25,0.25,0.25);\r\n                }\r\n                this.node.setPosition(340,this.y,0);\r\n               \r\n\r\n            }\r\n            else{\r\n                if(up_or_down<0.5)\r\n                this.node.setScale(-0.25,-0.25,0.25);\r\n                else\r\n                this.node.setScale(0.25,-0.25,0.25);\r\n                this.node.setPosition(-326,this.y,0);\r\n            }\r\n            this.moveway();\r\n\r\n\r\n    }\r\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n   \r\n        // 只在两个碰撞体开始接触时被调用一次\r\n        if(otherCollider.tag == 2){\r\n        this.state = HedgehogSTATE.DEAD;\r\n        let rgd = this.node.getComponent(RigidBody2D);\r\n        rgd.linearVelocity = v2(0,this.speed);\r\n        let ani = this.node.getComponent(Animation);\r\n        ani.play(\"Hedgehog_Smoke\");\r\n        }\r\n       \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    start () {\r\n        let collider = this.getComponent(Collider2D);\r\n        if(collider){\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n        }\r\n        let ifup = Math.random();\r\n        if(ifup<this.up_possibility){\r\n            this.reset();\r\n        }\r\n        else{\r\n            this.node.setPosition(340,-1000,0);\r\n        }\r\n        // [3]\r\n    }\r\n\r\n    update (deltaTime: number) {\r\n        \r\n      if(this.mk_controller.mk_state == monkey_state.ALIVE){\r\n        let ltree = find(\"Canvas/ltree\");\r\n        let ltree_rgd = ltree.getComponent(RigidBody2D);\r\n       \r\n      \r\n\r\n        this.during_time+=deltaTime;\r\n        let rgd = this.getComponent(RigidBody2D);\r\n        this.speed = ltree_rgd.linearVelocity.y;\r\n      \r\n\r\n        //update speed\r\n        switch(this.state){\r\n            case  HedgehogSTATE.DOWNRUNNING:\r\n                rgd.linearVelocity = v2(0,this.speed-3);\r\n                break;\r\n            case HedgehogSTATE.UPRUNNING:\r\n                rgd.linearVelocity = v2(0,this.speed+3);\r\n                break;\r\n            case  HedgehogSTATE.IDLE:\r\n                rgd.linearVelocity = v2(0,this.speed);\r\n                break;\r\n            case HedgehogSTATE.DEAD:\r\n                let ani = this.node.getComponent(Animation);\r\n               \r\n                if(ani.getState(\"Hedgehog_Smoke\").isPlaying==false){\r\n              \r\n\r\n                    this.state = HedgehogSTATE.IDLE;\r\n                    rgd.linearVelocity = v2(0,this.speed);\r\n                    this.node.setPosition(340,-1000,0);\r\n                   \r\n                }\r\n                break;\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n        if(this.during_time>this.judge_time&& this.node.getPosition().y<-870&&this.judge())\r\n        {\r\n\r\n            this.during_time = 0;\r\n            let ifrevert = Math.random();\r\n            if(ifrevert<this.revert_possibility){\r\n                this.reset();\r\n            }\r\n        }\r\n        let ani = this.getComponent(Animation);\r\n\r\n        if(ani.getState(\"Hedgehog_Walking\").isPlaying == true){\r\n          \r\n           \r\n            if(this.judgerun()==false){\r\n               \r\n                if(this.state == HedgehogSTATE.DOWNRUNNING){\r\n                    this.state=HedgehogSTATE.UPRUNNING;\r\n                    this.node.setScale(0.25,this.node.getScale().y,this.node.getScale().z);\r\n                \r\n                    rgd.linearVelocity = v2(0,this.speed+3);\r\n                }\r\n                else if(this.state == HedgehogSTATE.UPRUNNING){\r\n                    this.state = HedgehogSTATE.DOWNRUNNING;\r\n                    this.node.setScale(-0.25,this.node.getScale().y,this.node.getScale().z);\r\n                   \r\n                    rgd.linearVelocity = v2(0,this.speed-3);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    \r\n\r\n\r\n\r\n\r\n      }\r\n        // [4]\r\n    }\r\n\r\n    die() {\r\n        // this.node.getComponent(RigidBody2D).linearVelocity = v2(0,0);\r\n        this.node.getComponent(Animation).play('Hedgehog_Smoke');\r\n        // tween(this.node).to((this.node.position.y+871)/50,{position: v3(this.node.position.x,-871,0)})\r\n        // .start();\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * [1] Class member could be defined like this.\r\n * [2] Use `property` decorator if your want the member to be serializable.\r\n * [3] Your initialization goes here.\r\n * [4] Your update function goes here.\r\n *\r\n * Learn more about scripting: https://docs.cocos.com/creator/3.4/manual/zh/scripting/\r\n * Learn more about CCClass: https://docs.cocos.com/creator/3.4/manual/zh/scripting/decorator.html\r\n * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.4/manual/zh/scripting/life-cycle-callbacks.html\r\n */\r\n"]}